#!/usr/bin/env bash

error() {
    echo >&2
    echo "Error: ">&2
    echo "$1" >&2
    echo >&2
    exit 1
}

print_help() {
    echo
    echo "Ansie"
    echo "-----"
    echo
    echo "Usage:"
    echo "ansie [-c]                Specify a config. Defaults to:"
    echo "                          <user_home>/.config/ansie/ansie.config"
    echo "ansie [-t]                List tasks that would be run. Adds"
    echo "                          --list-tasks to ansible command."
    echo "                          This option cannot be combined with -n."
    echo "ansie [-n]                Dry-run. Adds --check to ansible command."
    echo "                          This option cannot be combined with -t."
    echo "ansie [-f]                Force. Bypasses confirmation to run ansible."
    echo "ansie [-h]                Shows this help message"
    echo
    exit 0
}

# Default opts
ANSIE_CONFIG="$HOME/.config/ansie/ansie.config"
ANSIBLE_DRY_RUN=false
ANSIBLE_LIST_TASKS=false
FORCE=false

# Parse opts
while getopts ":c: :t :n :f :h" opt; do
  case $opt in
    c) ANSIE_CONFIG="$OPTARG" ;;
    t) ANSIBLE_LIST_TASKS=true ;;
    n) ANSIBLE_DRY_RUN=true ;;
    f) FORCE=true ;;
    h) print_help ; exit 0 ;;
    *) error "Invalid option: -$OPTARG" ; exit 1 ;;
  esac
done

# Handle opts conflicts
if [[ $ANSIBLE_DRY_RUN == "true" && $ANSIBLE_LIST_TASKS == "true" ]] ; then
    error "Invalid option combination: -t and -n cannot be combined."
fi

# Ansible path
ANSIBLE_PATH="/etc/ansible"
if [[ $(uname) == "FreeBSD" ]] ; then
    ANSIBLE_PATH="/usr/local/etc/ansible"
else
    ANSIBLE_PATH="/etc/ansible"
fi

# Vault pass things
VAULT_FILE="${ANSIBLE_PATH}/vault-pass"
if [ -f "${VAULT_FILE}" ] ; then
    VAULT_PARAM="--vault-password-file=${VAULT_FILE}"
else
    VAULT_PARAM="--ask-vault-pass"
fi

# Get config
if ! [ -f "$ANSIE_CONFIG" ] ; then
    error "Config file not found: $ANSIE_CONFIG"
elif [[ $(head -1 $ANSIE_CONFIG) != "# Ansie config file" ]] ; then
    error "File not an Ansie Config File: $ANSIE_CONFIG"
else
    source $ANSIE_CONFIG
fi

# Build Ansible command
ANSIBLE_COMMAND=( "ansible-playbook" )

join_tags() {
    local IFS=","
    echo "$*"
}

if [[ ${#TAGS[@]} > 0 ]] ; then
    echo "TAGS"
    ANSIBLE_COMMAND+=( "--tags" )
    TAGS_STRING=`join_tags "${TAGS[@]}"`
    ANSIBLE_COMMAND+=( "\"$TAGS_STRING\"" )
fi

if [[ ${#SKIP_TAGS[@]} > 0 ]] ; then
    echo "SKIP"
    ANSIBLE_COMMAND+=( "--skip-tags" )
    SKIP_TAGS_STRING=`join_tags "${SKIP_TAGS[@]}"`
    ANSIBLE_COMMAND+=( "\"$SKIP_TAGS_STRING\"" )
fi

if [ $ANSIBLE_LIST_TASKS == "true" ] ; then
    ANSIBLE_COMMAND+=(  "--list-tasks" )
elif [ $ANSIBLE_DRY_RUN == "true" ] ; then
    ANSIBLE_COMMAND+=(  "--check" )
fi

ANSIBLE_COMMAND+=( "--ask-become-pass" "$VAULT_PARAM" "$ANSIBLE_PATH/playbook.yml" )

# Getting ready to run ansible.
if [ $FORCE == "false" ] ; then
    echo
    echo "Ansible command:"
    echo "${ANSIBLE_COMMAND[@]}"
    echo
    echo -n "Run ansible? [y] for yes, anything else will abort: "
    read user_input
    if [ $user_input != "y" ] ; then
        # OK, didn't get the go-ahead, aborting.
        echo "OK, aborting..."
        echo
        exit 1
    fi
fi

# Still here? Ok, let's run the command.
# ansible-playbook --ask-become-pass $VAULT_PARAM ${ANSIBLE_PATH}/playbook.yml
echo "Running command..."
echo
time "${ANSIBLE_COMMAND[@]}"
